# Reference of settings:
# https://github.com/golangci/golangci-lint/blob/master/.golangci.example.yml

run:
  timeout: 5m
  skip-dirs:
    - rest/models

# all available settings of specific linters
linters-settings:
  errcheck:
    # default is false: such cases aren't reported by default.
    check-blank: true
  govet:
    # report about shadowed variables
    check-shadowing: true
  goimports:
    # put imports beginning with prefix after 3rd-party packages;
    # it's a comma-separated list of prefixes
    local-prefixes: github.com/SKF/go-measurements-client
  gocognit:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 20
  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 150
  gosimple:
    go: "1.17"
    checks: ["all"]
  staticcheck:
    go: "1.17"
    checks: ["all"]
  stylecheck:
    go: "1.17"
    checks: ["all"]

# list of available linters can be found here: https://golangci-lint.run/usage/linters/
linters:
  disable-all: true
  enable:
    - bodyclose #- checks whether HTTP response body is closed successfully
    - dogsled #- Checks assignments with too many blank identifiers (e.g. x, , , _, := f())
    - dupl # Tool for code clone detection [fast: true, auto-fix: false]
    - gocognit #- Computes and checks the cognitive complexity of functions
    - gocognit # Computes and checks the cognitive complexity of functions [fast: true, auto-fix: false]
    - goconst #- Finds repeated strings that could be replaced by a constant
    - gocyclo #- Computes and checks the cyclomatic complexity of functions
    - gofmt #- Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
    - goimports #- Goimports does everything that gofmt does. Additionally it checks unused imports
    - gomnd #- An analyzer to detect magic numbers.
    - gomodguard #- Allow and block list linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations.
    - goprintffuncname #- Checks that printf-like functions are named with f at the end
    - gosec #- Inspects source code for security problems
    - gosimple # (megacheck): Linter for Go source code that specializes in simplifying a code [fast: false, auto-fix: false]
    - misspell #- Finds commonly misspelled English words in comments
    - nakedret #- Finds naked returns in functions greater than a specified function length
    - nolintlint # Reports ill-formed or insufficient nolint directives [fast: true, auto-fix: false]
    - nestif #- Reports deeply nested if statements
    - prealloc #- Finds slice declarations that could potentially be preallocated
    - revive #- Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint.
    - rowserrcheck #- checks whether Err of rows is checked successfully
    - staticcheck # (megacheck): Staticcheck is a go vet on steroids, applying a ton of static analysis checks [fast: false, auto-fix: false]
    - stylecheck #- Stylecheck is a replacement for golint
    - stylecheck # Stylecheck is a replacement for golint [fast: false, auto-fix: false]
    - unconvert #- Remove unnecessary type conversions
    - unparam #- Reports unused function parameters
    - whitespace #- Tool for detection of leading and trailing whitespace
    - wsl #- Whitespace Linter - Forces you to use empty lines!
