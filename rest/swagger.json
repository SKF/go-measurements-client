{
    "schemes": [],
    "swagger": "2.0",
    "info": {
        "description": "# Purpose\n\nThe purpose of the Measurement API is to handle measurement data.\n\n# Examples\n\nFor a more in-depth description, and examples, of usage of the various endpoints please refer to the [service description](/docs/service).\n",
        "title": "Measurement API",
        "contact": {},
        "version": "alpha"
    },
    "host": "measurement-api.sandbox.iot.enlight.skf.com",
    "basePath": "/",
    "paths": {
        "/asset": {
            "get": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Measurements"
                ],
                "summary": "Get last collected time (in RFC3339) and measurement count for a list of assets",
                "deprecated": true,
                "parameters": [
                    {
                        "description": "List of assets",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.LastCollectedAtAssetRequest"
                        }
                    },
                    {
                        "type": "string",
                        "default": "\"collected-at,measurement-count\"",
                        "description": "What data to include, formatted as a comma-separated string",
                        "name": "include-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AssetUsageArrayResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication is required.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "403": {
                        "description": "The request to access the resource was denied.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/asset/{assetId}/asset-data": {
            "delete": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Measurements"
                ],
                "summary": "Delete Asset Data",
                "parameters": [
                    {
                        "description": "Delete Node Data Request Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.DeleteAssetDataRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Asset ID",
                        "name": "assetId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication is required.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "403": {
                        "description": "The request to access the resource was denied.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/asset/{assetId}/asset-data/recent": {
            "get": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "description": "API call to fetch asset data measurements. The result can be limited to a from/to date and an offset and\nlimit. Also specific content types can be filtered out. The result is returned as a list of measurements\nasset data, with the most recent asset data returned first in the list.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Measurements"
                ],
                "summary": "Fetch Asset Data with date limits",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Asset ID",
                        "name": "assetId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "filter results by tag, to look for tag 'foo' with value 'bar': ?tags[foo]=bar",
                        "name": "tags",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "filter to return data after a given date",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "filter to return data before a given date",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "offsets a number of elements",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "type": "integer",
                        "default": 100,
                        "description": "limits the amount of returned data",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "filter to only return data of the provided content type. Available types: 'DATA_POINT', 'NOTE', 'QUESTION_ANSWERS', 'SPECTRUM', 'TIME_SERIES', 'MISSING_VALUE'",
                        "name": "content_type",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "filter to exclude coordinates",
                        "name": "exclude_coordinates",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "When true, return only resurrectable measurements previously deleted",
                        "name": "resurrectable",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.NodeDataResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication is required.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "403": {
                        "description": "The request to access the resource was denied.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/asset/{assetId}/media": {
            "get": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Measurements"
                ],
                "summary": "Fetch all media on nodes beneath a given asset",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Asset ID",
                        "name": "assetId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "filter results by tags, to look for tag 'foo' with value 'bar': ?tags[foo]=bar",
                        "name": "tags",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "filter to return data after a given date",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "filter to return data before a given date",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "When true, returns pixel width, pixel height and the ratio of the images",
                        "name": "dimensions",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.MediaMetadataResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication is required.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "403": {
                        "description": "The request to access the resource was denied.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/assets/search": {
            "post": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "description": "More detailed information on this endpoint and response data is available [here](/docs/service/assets-search).",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Measurements"
                ],
                "summary": "This endpoint can be used to retrieve metadata on a list of asset IDs",
                "parameters": [
                    {
                        "description": "The request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AssetsSearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AssetsSearchResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication is required.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "403": {
                        "description": "The request to access the resource was denied.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/events": {
            "get": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Measurements"
                ],
                "summary": "Fetch Events",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "description": "only return events after a sequence no",
                        "name": "after_seq_no",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "type": "integer",
                        "default": 100,
                        "description": "limits the amount of returned events",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "asc",
                        "description": "sort the result ascending or descending",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "410": {
                        "description": ""
                    }
                }
            }
        },
        "/export/{exportId}": {
            "get": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "description": "This endpoint is used to fetched a completed export. It will return a signed S3 URL that can be used to download the export file. The user calling this endpoint needs permission to get exports on the hierarchy node which the export was started on.",
                "tags": [
                    "Export"
                ],
                "summary": "Retrieves an export",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the export for which to retrieve a URL",
                        "name": "exportId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ExportURL"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication is required.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "403": {
                        "description": "The request to access the resource was denied.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "425": {
                        "description": "This error is returned if the requested export is not in a completed state.",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/export/{exportId}/status": {
            "get": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "description": "This endpoint is called to retrieve the status of an export. The user calling this endpoint needs permission to get export status on the hierarchy node which the export was started on.",
                "tags": [
                    "Export"
                ],
                "summary": "Fetch the status of an export",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the export for which to check status",
                        "name": "exportId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ExportStatusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication is required.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "403": {
                        "description": "The request to access the resource was denied.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/export/{nodeId}": {
            "post": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "description": "This is endpoint is used to start an export of measurements. The API supports exporting from a company, site, or asset node. If a company node is exported, measurements on all nodes in the subtree of the company will be included. Further filtering can be applied when creating the export, e.g. by only choosing to export certain types of measurements.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Export"
                ],
                "summary": "Trigger an export of measurement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The hierarchy node ID of the node that should be exported",
                        "name": "nodeId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Export request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ExportRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ExportResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication is required.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "403": {
                        "description": "The request to access the resource was denied.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "429": {
                        "description": "This error will be returned when there is any export currently in any running state (e.g. pending).",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/measurement-point/{nodeId}": {
            "get": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "description": "API call to fetch a measurement point for a node ID. The measurement point contains information about e.g. when a measurement for the given node ID was collected and how many times measurements have been collected.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Measurements"
                ],
                "summary": "Retrieve a measurement point",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node ID",
                        "name": "nodeId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.MeasurementPoint"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication is required.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "403": {
                        "description": "The request to access the resource was denied.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/node-data": {
            "post": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Measurements"
                ],
                "summary": "Batch Ingest Node Data",
                "parameters": [
                    {
                        "description": "Rules apply to measurements with content type MISSING_VALUE, see description of tags. Additional information on the inputs can be found at [the service documentation](/docs/service)",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.NodeDataRequest"
                            }
                        }
                    },
                    {
                        "type": "string",
                        "description": "When true, return predicted measurement IDs. Not applicable on media. Disclaimer: Because they are predicted, an ID that will never be created might be returned, if, for example, the measurement already exists.",
                        "name": "verbose",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "When true, return only resurrectable measurements previously deleted",
                        "name": "resurrectable",
                        "in": "query"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/model.IngestNodeDataResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication is required.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "403": {
                        "description": "The request to access the resource was denied.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/node-data/{measurementId}": {
            "get": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "description": "API call to fetch node data measurement. The result is returned as a measurement node data.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Measurement"
                ],
                "summary": "Fetch Node Data for specified measurement",
                "parameters": [
                    {
                        "type": "string",
                        "x-go-type": { "type": "UUID", "import": { "package": "github.com/SKF/go-utility/v2/uuid" }, "hints": { "kind": "object" } }, "format": "uuid",
                        "description": "Measurement ID",
                        "name": "measurementId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "DATA_POINT",
                            "SPECTRUM",
                            "TIME_SERIES",
                            "NOTE",
                            "MISSING_VALUE",
                            "QUESTION_ANSWERS"
                        ],
                        "type": "string",
                        "description": "Content Type",
                        "name": "contentType",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "filter to exclude coordinates",
                        "name": "exclude_coordinates",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.MeasurementResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication is required.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "403": {
                        "description": "The request to access the resource was denied.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "description": "API call to update node data measurement.",
                "tags": [
                    "Measurement"
                ],
                "summary": "Update Node Data for specified measurement",
                "parameters": [
                    {
                        "description": "Node Data Request Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.NodeDataRequest"
                        }
                    },
                    {
                        "enum": [
                            "DATA_POINT",
                            "SPECTRUM",
                            "TIME_SERIES",
                            "NOTE",
                            "MISSING_VALUE",
                            "QUESTION_ANSWERS"
                        ],
                        "type": "string",
                        "description": "Content Type",
                        "name": "contentType",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "When true, resurrect a soft-deleted measurement",
                        "name": "resurrect",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "x-go-type": { "type": "UUID", "import": { "package": "github.com/SKF/go-utility/v2/uuid" }, "hints": { "kind": "object" } }, "format": "uuid",
                        "description": "Measurement ID",
                        "name": "measurementId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication is required.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "403": {
                        "description": "The request to access the resource was denied.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "description": "API call to delete a measurement.",
                "tags": [
                    "Measurement"
                ],
                "summary": "deletes a measurement",
                "parameters": [
                    {
                        "type": "string",
                        "x-go-type": { "type": "UUID", "import": { "package": "github.com/SKF/go-utility/v2/uuid" }, "hints": { "kind": "object" } }, "format": "uuid",
                        "description": "Measurement ID",
                        "name": "measurementId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "DATA_POINT",
                            "SPECTRUM",
                            "TIME_SERIES",
                            "NOTE",
                            "MISSING_VALUE",
                            "QUESTION_ANSWERS"
                        ],
                        "type": "string",
                        "description": "Content Type",
                        "name": "contentType",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication is required.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "403": {
                        "description": "The request to access the resource was denied.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/node-data/{measurementId}/band/overall": {
            "get": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "description": "API call to fetch overall band value. The result is returned with the measurement's creation date",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Measurement"
                ],
                "summary": "Fetch overall band value for specified Spectrum measurement",
                "parameters": [
                    {
                        "type": "string",
                        "x-go-type": { "type": "UUID", "import": { "package": "github.com/SKF/go-utility/v2/uuid" }, "hints": { "kind": "object" } }, "format": "uuid",
                        "description": "Measurement ID",
                        "name": "measurementId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Start Frequency",
                        "name": "startFrequency",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Stop Frequency",
                        "name": "stopFrequency",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "rectangular",
                            "uniform",
                            "hanning",
                            "hamming",
                            "flattop"
                        ],
                        "type": "string",
                        "description": "Window Function",
                        "name": "windowFunction",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.MeasurementBandOverallResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication is required.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "403": {
                        "description": "The request to access the resource was denied.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/{nodeId}/band/overall": {
            "get": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "description": "API call to fetch overall band value for all spectrum measurements under the given node. The result is returned with each measurement's creation date.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Measurements"
                ],
                "summary": "Fetch overall band value for all spectrum measurements under given node",
                "parameters": [
                    {
                        "type": "string",
                        "x-go-type": { "type": "UUID", "import": { "package": "github.com/SKF/go-utility/v2/uuid" }, "hints": { "kind": "object" } }, "format": "uuid",
                        "description": "Node ID",
                        "name": "nodeId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Start Frequency",
                        "name": "startFrequency",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Stop Frequency",
                        "name": "stopFrequency",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "rectangular",
                            "uniform",
                            "hanning",
                            "hamming",
                            "flattop"
                        ],
                        "type": "string",
                        "description": "Window Function",
                        "name": "windowFunction",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter to return data after a given date",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter to return data before a given date",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.NodeBandOverallResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication is required.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "403": {
                        "description": "The request to access the resource was denied.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/{nodeId}/last-collected-at": {
            "get": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Measurements"
                ],
                "summary": "Get last collected time in RFC3339 for asset node",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node ID",
                        "name": "nodeId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.StringResponse"
                        }
                    },
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.StringResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication is required.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "403": {
                        "description": "The request to access the resource was denied.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/{nodeId}/media": {
            "get": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Measurements"
                ],
                "summary": "Fetch all media for a given node",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node ID",
                        "name": "nodeId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "filter results by tags, to look for tag 'foo' with value 'bar': ?tags[foo]=bar",
                        "name": "tags",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "filter to return data after a given date",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "filter to return data before a given date",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.MediaMetadataResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication is required.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "403": {
                        "description": "The request to access the resource was denied.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/{nodeId}/media-upload-url": {
            "put": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "description": "Request a pre-signed URL to upload media files to. This is mainly used for larger files",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Measurements"
                ],
                "summary": "Fetch signed media upload URL for a given node",
                "parameters": [
                    {
                        "description": "Node Data Request Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SignedURLRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Node ID",
                        "name": "nodeId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.MediaMetadataResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication is required.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "403": {
                        "description": "The request to access the resource was denied.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/{nodeId}/media/{mediaId}": {
            "get": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "produces": [
                    "application/octet-stream",
                    "application/json"
                ],
                "tags": [
                    "Measurements"
                ],
                "summary": "Fetch a Media file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node ID",
                        "name": "nodeId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Media ID",
                        "name": "mediaId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The content of the media file being downloaded",
                        "schema": {
                            "type": "file"
                        },
                        "headers": {
                            "Cache-Control": {
                                "type": "string",
                                "description": "Specifies how long the client can cache the returned media file"
                            },
                            "Content-Length": {
                                "type": "string",
                                "description": "The size of the media file"
                            },
                            "Content-Type": {
                                "type": "string",
                                "description": "The MIME type of the media file"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication is required.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "403": {
                        "description": "The request to access the resource was denied.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/{nodeId}/node-data": {
            "delete": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Measurements"
                ],
                "summary": "Delete Node Data",
                "parameters": [
                    {
                        "description": "Delete Node Data Request Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.DeleteNodeDataRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Node ID",
                        "name": "nodeId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication is required.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "403": {
                        "description": "The request to access the resource was denied.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/{nodeId}/node-data/recent": {
            "get": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "description": "API call to fetch node data measurements. The result can be limited to a from/to date and an offset and\nlimit. Also specific content types can be filtered out. The result is returned as a list of measurements\nnode data, with the most recent node data returned first in the list.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Measurements"
                ],
                "summary": "Fetch Node Data with date limits",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node ID",
                        "name": "nodeId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "filter results by tag, to look for tag 'foo' with value 'bar': ?tags[foo]=bar",
                        "name": "tags",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "filter to return data after a given date",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "filter to return data before a given date",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "offsets a number of elements",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "type": "integer",
                        "default": 100,
                        "description": "limits the amount of returned data",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "filter to only return data of the provided content type. Available types: 'DATA_POINT', 'NOTE', 'QUESTION_ANSWERS', 'SPECTRUM', 'TIME_SERIES', 'MISSING_VALUE'",
                        "name": "content_type",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "filter to exclude coordinates",
                        "name": "exclude_coordinates",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "When true, return only resurrectable measurements previously deleted",
                        "name": "resurrectable",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.NodeDataResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication is required.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "403": {
                        "description": "The request to access the resource was denied.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/usage-counter/{nodeId}": {
            "get": {
                "security": [
                    {
                        "AccessToken": []
                    }
                ],
                "description": "API call to fetch the usage counters for a node ID. The number of counters returned can be limited with the limit query parameter.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Measurements"
                ],
                "summary": "Retrieve the usage counter for a node",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node ID",
                        "name": "nodeId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.UsageCounter"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication is required.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "403": {
                        "description": "The request to access the resource was denied.",
                        "schema": {
                            "$ref": "#/definitions/problems.BasicProblem"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "httpmodel.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "object",
                    "properties": {
                        "message": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "model.AssetUsageArrayResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.AssetUsageResponse"
                    }
                }
            }
        },
        "model.AssetUsageResponse": {
            "type": "object",
            "properties": {
                "assetId": {
                    "type": "string",
                    "x-go-type": { "type": "UUID", "import": { "package": "github.com/SKF/go-utility/v2/uuid" }, "hints": { "kind": "object" } }, "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "collectedAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-01-23T13:50:12.52Z"
                }
            }
        },
        "model.AssetsSearchRequest": {
            "type": "object",
            "properties": {
                "assetIDs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "123e4567-e89b-12d3-a456-426614174000",
                        "123e4567-e89b-12d3-a456-426614174001",
                        "123e4567-e89b-12d3-a456-426614174002"
                    ]
                }
            }
        },
        "model.AssetsSearchResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.AssetsSearchResponseData"
                    }
                }
            }
        },
        "model.AssetsSearchResponseData": {
            "type": "object",
            "properties": {
                "assetId": {
                    "type": "string",
                    "x-go-type": { "type": "UUID", "import": { "package": "github.com/SKF/go-utility/v2/uuid" }, "hints": { "kind": "object" } }, "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "collectedAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-01-23T13:50:12.52Z"
                },
                "reason": {
                    "$ref": "#/definitions/model.AssetsSearchResponseDataReason"
                }
            }
        },
        "model.AssetsSearchResponseDataReason": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-01-23T13:50:12.52Z"
                },
                "name": {
                    "type": "string",
                    "example": "guarding_hazard"
                }
            }
        },
        "model.Coordinate": {
            "type": "object",
            "properties": {
                "x": {
                    "type": "number",
                    "format": "float",
                    "example": 1615280620000
                },
                "y": {
                    "type": "number",
                    "format": "float",
                    "example": 3.14159
                }
            }
        },
        "model.DataPoint": {
            "type": "object",
            "properties": {
                "coordinate": {
                    "$ref": "#/definitions/model.Coordinate"
                },
                "xUnit": {
                    "description": "XUnit describes the X unit, such as a ms (millisecond)",
                    "type": "string",
                    "example": "ms"
                },
                "yUnit": {
                    "description": "YUnit describes the Y unit, such as acceleration enveloping peak-to-peak (gE PtP), mm/s (millimeters per second), in/s (inch per second), Celsius (°C) or Fahrenheit (°F)",
                    "type": "string",
                    "example": "mm/s"
                }
            }
        },
        "model.DeleteAssetDataRequest": {
            "type": "object",
            "properties": {
                "measurementIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "123e4567-e89b-12d3-a456-426614174000",
                        "123e4567-e89b-12d3-a456-426614174001"
                    ]
                },
                "reasonForDelete": {
                    "type": "string",
                    "example": "deleted due to bad luck"
                },
                "resurrectable": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "model.DeleteNodeDataRequest": {
            "type": "object",
            "properties": {
                "from": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-01-23T13:50:12.52Z"
                },
                "to": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-01-23T13:50:13.53Z"
                }
            }
        },
        "model.ExportMetadata": {
            "type": "object",
            "properties": {
                "from": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-01-23T13:50:12.52Z"
                },
                "limit": {
                    "type": "number",
                    "format": "int64",
                    "example": 50
                },
                "offset": {
                    "type": "number",
                    "format": "int64",
                    "example": 100
                },
                "to": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-01-23T13:50:12.52Z"
                }
            }
        },
        "model.ExportRequestBody": {
            "type": "object",
            "properties": {
                "contentTypes": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "maxLength": 1,
                        "minLength": 1,
                        "enum": [
                            "DATA_POINT",
                            "TIME_SERIES",
                            "SPECTRUM",
                            "NOTE",
                            "QUESTION_ANSWERS"
                        ]
                    },
                    "example": [
                        "TIME_SERIES"
                    ]
                },
                "from": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-11-26T10:31:19Z"
                },
                "limit": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0,
                    "example": 100
                },
                "offset": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0,
                    "example": 100
                },
                "to": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-11-26T10:31:19Z"
                }
            }
        },
        "model.ExportResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "x-go-type": { "type": "UUID", "import": { "package": "github.com/SKF/go-utility/v2/uuid" }, "hints": { "kind": "object" } }, "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "links": {
                    "$ref": "#/definitions/model.ExportResponseLinks"
                }
            }
        },
        "model.ExportResponseLinks": {
            "type": "object",
            "properties": {
                "self": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://example.com/export/123e4567-e89b-12d3-a456-426614174000"
                },
                "status": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://example.com/export/123e4567-e89b-12d3-a456-426614174000/status"
                }
            }
        },
        "model.ExportStatusResponse": {
            "type": "object",
            "properties": {
                "links": {
                    "$ref": "#/definitions/model.ExportStatusResponseLinks"
                },
                "metadata": {
                    "$ref": "#/definitions/model.ExportMetadata"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "pending",
                        "running",
                        "completed",
                        "failed"
                    ],
                    "example": "completed"
                }
            }
        },
        "model.ExportStatusResponseLinks": {
            "type": "object",
            "properties": {
                "export": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://example.com/export/123e4567-e89b-12d3-a456-426614174000"
                },
                "self": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://example.com/export/123e4567-e89b-12d3-a456-426614174000/status"
                }
            }
        },
        "model.ExportURL": {
            "type": "object",
            "properties": {
                "expiresAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-11-26T10:31:19Z"
                },
                "links": {
                    "$ref": "#/definitions/model.ExportURLLinks"
                },
                "metadata": {
                    "$ref": "#/definitions/model.ExportMetadata"
                },
                "url": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://example.com/export/123e4567-e89b-12d3-a456-426614174000"
                }
            }
        },
        "model.ExportURLLinks": {
            "type": "object",
            "properties": {
                "self": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://example.com/export/123e4567-e89b-12d3-a456-426614174000"
                },
                "status": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://example.com/export/123e4567-e89b-12d3-a456-426614174000/status"
                }
            }
        },
        "model.IngestNodeDataResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.MeasurementData"
                    }
                }
            }
        },
        "model.LastCollectedAtAssetRequest": {
            "type": "object",
            "properties": {
                "assetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "123e4567-e89b-12d3-a456-426614174000",
                        "123e4567-e89b-12d3-a456-426614174001"
                    ]
                }
            }
        },
        "model.MeasurementBandOverall": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-01-23T13:50:12.52Z"
                },
                "measurementId": {
                    "type": "string",
                    "x-go-type": { "type": "UUID", "import": { "package": "github.com/SKF/go-utility/v2/uuid" }, "hints": { "kind": "object" } }, "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "overallBand": {
                    "type": "number"
                }
            }
        },
        "model.MeasurementBandOverallResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-01-23T13:50:12.52Z"
                },
                "overallBand": {
                    "type": "number"
                }
            }
        },
        "model.MeasurementData": {
            "type": "object",
            "properties": {
                "links": {
                    "$ref": "#/definitions/model.MeasurementLink"
                },
                "measurementId": {
                    "type": "string",
                    "x-go-type": { "type": "UUID", "import": { "package": "github.com/SKF/go-utility/v2/uuid" }, "hints": { "kind": "object" } }, "format": "uuid",
                    "example": "ca65a74a-7dc3-11eb-9439-0242ac130002"
                }
            }
        },
        "model.MeasurementLink": {
            "type": "object",
            "properties": {
                "self": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://example.com/node-data/123e4567-e89b-12d3-a456-426614174000"
                }
            }
        },
        "model.MeasurementPoint": {
            "type": "object",
            "properties": {
                "allParents": {
                    "type": "string"
                },
                "assetId": {
                    "type": "string",
                    "x-go-type": { "type": "UUID", "import": { "package": "github.com/SKF/go-utility/v2/uuid" }, "hints": { "kind": "object" } }, "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "collectedAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-01-23T13:50:12.52Z"
                },
                "companyId": {
                    "type": "string",
                    "x-go-type": { "type": "UUID", "import": { "package": "github.com/SKF/go-utility/v2/uuid" }, "hints": { "kind": "object" } }, "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "frequency": {
                    "type": "string",
                    "enum": [
                        "very-high",
                        "high",
                        "medium",
                        "low",
                        "very-low",
                        "unknown"
                    ],
                    "example": "high"
                },
                "id": {
                    "type": "number"
                },
                "lastDataPoint": {
                    "type": "number",
                    "format": "float",
                    "example": 4.2
                },
                "measurementCount": {
                    "type": "number",
                    "example": 42
                },
                "nodeId": {
                    "type": "string",
                    "x-go-type": { "type": "UUID", "import": { "package": "github.com/SKF/go-utility/v2/uuid" }, "hints": { "kind": "object" } }, "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "originId": {
                    "type": "string"
                },
                "plantId": {
                    "type": "string",
                    "x-go-type": { "type": "UUID", "import": { "package": "github.com/SKF/go-utility/v2/uuid" }, "hints": { "kind": "object" } }, "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "siteId": {
                    "type": "string",
                    "x-go-type": { "type": "UUID", "import": { "package": "github.com/SKF/go-utility/v2/uuid" }, "hints": { "kind": "object" } }, "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-01-23T13:50:12.52Z"
                }
            }
        },
        "model.MeasurementResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/model.NodeData"
                }
            }
        },
        "model.Media": {
            "type": "object",
            "properties": {
                "contentType": {
                    "type": "string",
                    "example": "IMAGE_PNG"
                },
                "media": {
                    "type": "string",
                    "format": "base64",
                    "example": "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mPkClhYDwAC4wF8UDC8YAAAAABJRU5ErkJggg=="
                }
            }
        },
        "model.MediaMetaData": {
            "type": "object",
            "properties": {
                "contentType": {
                    "type": "string",
                    "example": "IMAGE_PNG"
                },
                "contentUrl": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://example.com/nodes/123e4567-e89b-12d3-a456-426614174000/media/123e4567-e89b-12d3-a456-426614174000"
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-01-23T13:50:12.52Z"
                },
                "dimensions": {
                    "type": "object",
                    "properties": {
                        "height": {
                            "type": "integer",
                            "example": 512
                        },
                        "ratio": {
                            "type": "number",
                            "example": 1.0277777777777777
                        },
                        "width": {
                            "type": "integer",
                            "example": 256
                        }
                    }
                },
                "id": {
                    "description": "This is the ID of the media file",
                    "type": "string",
                    "x-go-type": { "type": "UUID", "import": { "package": "github.com/SKF/go-utility/v2/uuid" }, "hints": { "kind": "object" } }, "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "tag_key",
                        "its_value"
                    ]
                }
            }
        },
        "model.MediaMetadataResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.MediaMetaData"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/model.Pagination"
                }
            }
        },
        "model.NodeBandOverallResponse": {
            "type": "object",
            "properties": {
                "trends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.MeasurementBandOverall"
                    }
                }
            }
        },
        "model.NodeData": {
            "type": "object",
            "properties": {
                "assetId": {
                    "type": "string",
                    "x-go-type": { "type": "UUID", "import": { "package": "github.com/SKF/go-utility/v2/uuid" }, "hints": { "kind": "object" } }, "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "contentType": {
                    "type": "string",
                    "example": "DATA_POINT"
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-01-23T13:50:12.52Z"
                },
                "dataPoint": {
                    "$ref": "#/definitions/model.DataPoint"
                },
                "frequency": {
                    "type": "string",
                    "enum": [
                        "very-high",
                        "high",
                        "medium",
                        "low",
                        "very-low",
                        "unknown"
                    ],
                    "example": "high"
                },
                "measurementId": {
                    "type": "string",
                    "x-go-type": { "type": "UUID", "import": { "package": "github.com/SKF/go-utility/v2/uuid" }, "hints": { "kind": "object" } }, "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "nodeId": {
                    "type": "string",
                    "x-go-type": { "type": "UUID", "import": { "package": "github.com/SKF/go-utility/v2/uuid" }, "hints": { "kind": "object" } }, "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "note": {
                    "type": "string",
                    "example": "This is a note"
                },
                "questionAnswers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "yes",
                        "no",
                        "maybe"
                    ]
                },
                "rateOfChange": {
                    "type": "number",
                    "format": "float",
                    "example": 50
                },
                "siteId": {
                    "type": "string",
                    "x-go-type": { "type": "UUID", "import": { "package": "github.com/SKF/go-utility/v2/uuid" }, "hints": { "kind": "object" } }, "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "spectrum": {
                    "$ref": "#/definitions/model.Spectrum"
                },
                "tags": {
                    "description": "Tags is a JSON object encoded as a string",
                    "type": "string",
                    "example": "{\"reason\":\"not_monitored\"}"
                },
                "timeSeries": {
                    "$ref": "#/definitions/model.TimeSeries"
                }
            }
        },
        "model.NodeDataRequest": {
            "type": "object",
            "properties": {
                "contentType": {
                    "type": "string",
                    "example": "DATA_POINT"
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-01-23T13:50:12.52Z"
                },
                "dataPoint": {
                    "$ref": "#/definitions/model.DataPoint"
                },
                "media": {
                    "$ref": "#/definitions/model.Media"
                },
                "nodeId": {
                    "type": "string",
                    "x-go-type": { "type": "UUID", "import": { "package": "github.com/SKF/go-utility/v2/uuid" }, "hints": { "kind": "object" } }, "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "note": {
                    "type": "string",
                    "example": "This is a note"
                },
                "questionAnswers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "yes",
                        "no",
                        "maybe"
                    ]
                },
                "spectrum": {
                    "$ref": "#/definitions/model.Spectrum"
                },
                "tags": {
                    "description": "A reason tag has to be included for measurements with content type MISSING_VALUE, it can be any string but\nrecommended values are unsafe_access, guarding_hazard, rotating_component_exposed, como_system_malfunction,\nnot_operating, under_maintenance, out_of_operating_regime, in_standby, no_operator_to_start_equipment,\nno_reason_set, not_monitored or out_of_service",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "reason": "in_standby"
                    }
                },
                "timeSeries": {
                    "$ref": "#/definitions/model.TimeSeries"
                }
            }
        },
        "model.NodeDataResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.NodeData"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/model.Pagination"
                }
            }
        },
        "model.Pagination": {
            "type": "object",
            "properties": {
                "next": {
                    "type": "string"
                },
                "prev": {
                    "type": "string"
                }
            }
        },
        "model.SignedURLRequest": {
            "type": "object",
            "required": [
                "contentType"
            ],
            "properties": {
                "contentType": {
                    "description": "The media content type, the valid values are UNKNOWN, AUDIO_WAV, IMAGE_JPEG, IMAGE_PNG, AUDIO_MP4",
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "AUDIO_WAV",
                        "AUDIO_MP4",
                        "IMAGE_JPEG",
                        "IMAGE_PNG"
                    ],
                    "example": "IMAGE_PNG"
                },
                "id": {
                    "description": "The ID of the media, the value needs to be a valid UUID",
                    "type": "string",
                    "x-go-type": { "type": "UUID", "import": { "package": "github.com/SKF/go-utility/v2/uuid" }, "hints": { "kind": "object" } }, "format": "uuid",
                    "example": "ca65a74a-7dc3-11eb-9439-0242ac130002"
                }
            }
        },
        "model.Spectrum": {
            "type": "object",
            "properties": {
                "coordinates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Coordinate"
                    }
                },
                "speed": {
                    "description": "RPM",
                    "type": "number",
                    "format": "float",
                    "example": 1600
                },
                "windowFunction": {
                    "type": "string",
                    "example": "Hamming"
                },
                "xUnit": {
                    "description": "XUnit describes the X unit, such as a ms (millisecond) or a s (second)",
                    "type": "string",
                    "example": "ms"
                },
                "yUnit": {
                    "description": "YUnit describes the Y unit, such as acceleration enveloping (gE), mm/s (millimeters per second) or in/s (inch per second)",
                    "type": "string",
                    "example": "mm/s"
                }
            }
        },
        "model.StringResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string"
                }
            }
        },
        "model.TimeSeries": {
            "type": "object",
            "properties": {
                "coordinates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Coordinate"
                    }
                },
                "xUnit": {
                    "description": "XUnit describes the X unit, such as a ms (millisecond) or a s (second)",
                    "type": "string",
                    "example": "ms"
                },
                "yUnit": {
                    "description": "YUnit describes the Y unit, such as acceleration enveloping (gE), mm/s (millimeters per second) or in/s (inch per second)",
                    "type": "string",
                    "example": "mm/s"
                }
            }
        },
        "model.UsageCounter": {
            "type": "object",
            "properties": {
                "collectedDate": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-01-23T13:50:12.52Z"
                },
                "collectedMonth": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-01-23T13:50:12.52Z"
                },
                "measurementCount": {
                    "type": "number",
                    "format": "int64",
                    "example": 42
                },
                "nodeId": {
                    "type": "string",
                    "x-go-type": { "type": "UUID", "import": { "package": "github.com/SKF/go-utility/v2/uuid" }, "hints": { "kind": "object" } }, "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                }
            }
        },
        "problems.BasicProblem": {
            "type": "object",
            "properties": {
                "correlationId": {
                    "description": "CorrelationID, an unique identifier for tracing this issue in server logs.",
                    "type": "string"
                },
                "detail": {
                    "description": "Detail, a human-readable explanation specific to this occurrence of the problem.",
                    "type": "string"
                },
                "instance": {
                    "description": "Instance, a URI reference that identifies the specific resource on which the problem occurred.",
                    "type": "string",
                    "format": "url"
                },
                "status": {
                    "description": "Status, the HTTP status code associated with this problem occurrence.",
                    "type": "integer"
                },
                "title": {
                    "description": "Title, a short, human-readable summary of the problem type.\nThis should always be the same value for the same Type.",
                    "type": "string"
                },
                "type": {
                    "description": "Type, a URI reference that identifies the problem type.\nWhen dereferenced this should provide human-readable documentation for the\nproblem type. When member is not present it is assumed to be \"about:blank\".",
                    "type": "string",
                    "format": "url"
                }
            }
        }
    },
    "securityDefinitions": {
        "AccessToken": {
            "type": "apiKey",
            "name": "authorization",
            "in": "header"
        }
    }
}