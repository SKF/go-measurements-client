// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelExportStatusResponse model export status response
//
// swagger:model model.ExportStatusResponse
type ModelExportStatusResponse struct {

	// links
	Links *ModelExportStatusResponseLinks `json:"links,omitempty"`

	// metadata
	Metadata *ModelExportMetadata `json:"metadata,omitempty"`

	// status
	// Enum: [pending running completed failed]
	Status string `json:"status,omitempty"`
}

// Validate validates this model export status response
func (m *ModelExportStatusResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelExportStatusResponse) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *ModelExportStatusResponse) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

var modelExportStatusResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pending","running","completed","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelExportStatusResponseTypeStatusPropEnum = append(modelExportStatusResponseTypeStatusPropEnum, v)
	}
}

const (

	// ModelExportStatusResponseStatusPending captures enum value "pending"
	ModelExportStatusResponseStatusPending string = "pending"

	// ModelExportStatusResponseStatusRunning captures enum value "running"
	ModelExportStatusResponseStatusRunning string = "running"

	// ModelExportStatusResponseStatusCompleted captures enum value "completed"
	ModelExportStatusResponseStatusCompleted string = "completed"

	// ModelExportStatusResponseStatusFailed captures enum value "failed"
	ModelExportStatusResponseStatusFailed string = "failed"
)

// prop value enum
func (m *ModelExportStatusResponse) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, modelExportStatusResponseTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ModelExportStatusResponse) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelExportStatusResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelExportStatusResponse) UnmarshalBinary(b []byte) error {
	var res ModelExportStatusResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
