// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelSignedURLRequest model signed URL request
//
// swagger:model model.SignedURLRequest
type ModelSignedURLRequest struct {

	// The media content type, the valid values are UNKNOWN, AUDIO_WAV, IMAGE_JPEG, IMAGE_PNG, AUDIO_MP4
	// Required: true
	// Enum: [UNKNOWN AUDIO_WAV AUDIO_MP4 IMAGE_JPEG IMAGE_PNG]
	ContentType *string `json:"contentType"`

	// The ID of the media, the value needs to be a valid UUID
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`
}

// Validate validates this model signed URL request
func (m *ModelSignedURLRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var modelSignedUrlRequestTypeContentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UNKNOWN","AUDIO_WAV","AUDIO_MP4","IMAGE_JPEG","IMAGE_PNG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelSignedUrlRequestTypeContentTypePropEnum = append(modelSignedUrlRequestTypeContentTypePropEnum, v)
	}
}

const (

	// ModelSignedURLRequestContentTypeUNKNOWN captures enum value "UNKNOWN"
	ModelSignedURLRequestContentTypeUNKNOWN string = "UNKNOWN"

	// ModelSignedURLRequestContentTypeAUDIOWAV captures enum value "AUDIO_WAV"
	ModelSignedURLRequestContentTypeAUDIOWAV string = "AUDIO_WAV"

	// ModelSignedURLRequestContentTypeAUDIOMP4 captures enum value "AUDIO_MP4"
	ModelSignedURLRequestContentTypeAUDIOMP4 string = "AUDIO_MP4"

	// ModelSignedURLRequestContentTypeIMAGEJPEG captures enum value "IMAGE_JPEG"
	ModelSignedURLRequestContentTypeIMAGEJPEG string = "IMAGE_JPEG"

	// ModelSignedURLRequestContentTypeIMAGEPNG captures enum value "IMAGE_PNG"
	ModelSignedURLRequestContentTypeIMAGEPNG string = "IMAGE_PNG"
)

// prop value enum
func (m *ModelSignedURLRequest) validateContentTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, modelSignedUrlRequestTypeContentTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ModelSignedURLRequest) validateContentType(formats strfmt.Registry) error {

	if err := validate.Required("contentType", "body", m.ContentType); err != nil {
		return err
	}

	// value enum
	if err := m.validateContentTypeEnum("contentType", "body", *m.ContentType); err != nil {
		return err
	}

	return nil
}

func (m *ModelSignedURLRequest) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelSignedURLRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelSignedURLRequest) UnmarshalBinary(b []byte) error {
	var res ModelSignedURLRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
