// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/SKF/go-utility/v2/uuid"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelNodeDataTrendData model node data trend data
//
// swagger:model model.NodeDataTrendData
type ModelNodeDataTrendData struct {

	// coordinates
	Coordinates []*ModelCoordinate `json:"coordinates"`

	// node Id
	NodeID uuid.UUID `json:"nodeId,omitempty"`

	// spectrum metadata
	SpectrumMetadata []*ModelTrendSpectrumMetadata `json:"spectrumMetadata"`

	// tags
	Tags map[string]interface{} `json:"tags,omitempty"`

	// xUnit describes the X unit, such as a ms (millisecond)
	XUnit string `json:"xUnit,omitempty"`

	// yUnit describes the Y unit, such as acceleration enveloping peak-to-peak (gE PtP), mm/s (millimeters per second), in/s (inch per second), Celsius (°C) or Fahrenheit (°F)
	YUnit string `json:"yUnit,omitempty"`
}

// Validate validates this model node data trend data
func (m *ModelNodeDataTrendData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCoordinates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpectrumMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelNodeDataTrendData) validateCoordinates(formats strfmt.Registry) error {

	if swag.IsZero(m.Coordinates) { // not required
		return nil
	}

	for i := 0; i < len(m.Coordinates); i++ {
		if swag.IsZero(m.Coordinates[i]) { // not required
			continue
		}

		if m.Coordinates[i] != nil {
			if err := m.Coordinates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("coordinates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelNodeDataTrendData) validateSpectrumMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.SpectrumMetadata) { // not required
		return nil
	}

	for i := 0; i < len(m.SpectrumMetadata); i++ {
		if swag.IsZero(m.SpectrumMetadata[i]) { // not required
			continue
		}

		if m.SpectrumMetadata[i] != nil {
			if err := m.SpectrumMetadata[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("spectrumMetadata" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelNodeDataTrendData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelNodeDataTrendData) UnmarshalBinary(b []byte) error {
	var res ModelNodeDataTrendData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
