// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelExportRequestBody model export request body
//
// swagger:model model.ExportRequestBody
type ModelExportRequestBody struct {

	// content types
	ContentTypes []string `json:"contentTypes"`

	// from
	// Format: date-time
	From strfmt.DateTime `json:"from,omitempty"`

	// limit
	// Minimum: 0
	Limit *int64 `json:"limit,omitempty"`

	// offset
	// Minimum: 0
	Offset *int64 `json:"offset,omitempty"`

	// to
	// Format: date-time
	To strfmt.DateTime `json:"to,omitempty"`
}

// Validate validates this model export request body
func (m *ModelExportRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContentTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var modelExportRequestBodyContentTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DATA_POINT","TIME_SERIES","SPECTRUM","NOTE","QUESTION_ANSWERS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelExportRequestBodyContentTypesItemsEnum = append(modelExportRequestBodyContentTypesItemsEnum, v)
	}
}

func (m *ModelExportRequestBody) validateContentTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, modelExportRequestBodyContentTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ModelExportRequestBody) validateContentTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.ContentTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.ContentTypes); i++ {

		if err := validate.MinLength("contentTypes"+"."+strconv.Itoa(i), "body", string(m.ContentTypes[i]), 1); err != nil {
			return err
		}

		if err := validate.MaxLength("contentTypes"+"."+strconv.Itoa(i), "body", string(m.ContentTypes[i]), 1); err != nil {
			return err
		}

		// value enum
		if err := m.validateContentTypesItemsEnum("contentTypes"+"."+strconv.Itoa(i), "body", m.ContentTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ModelExportRequestBody) validateFrom(formats strfmt.Registry) error {

	if swag.IsZero(m.From) { // not required
		return nil
	}

	if err := validate.FormatOf("from", "body", "date-time", m.From.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ModelExportRequestBody) validateLimit(formats strfmt.Registry) error {

	if swag.IsZero(m.Limit) { // not required
		return nil
	}

	if err := validate.MinimumInt("limit", "body", int64(*m.Limit), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ModelExportRequestBody) validateOffset(formats strfmt.Registry) error {

	if swag.IsZero(m.Offset) { // not required
		return nil
	}

	if err := validate.MinimumInt("offset", "body", int64(*m.Offset), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ModelExportRequestBody) validateTo(formats strfmt.Registry) error {

	if swag.IsZero(m.To) { // not required
		return nil
	}

	if err := validate.FormatOf("to", "body", "date-time", m.To.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelExportRequestBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelExportRequestBody) UnmarshalBinary(b []byte) error {
	var res ModelExportRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
