// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/SKF/go-utility/v2/uuid"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelMediaMetaData model media meta data
//
// swagger:model model.MediaMetaData
type ModelMediaMetaData struct {

	// content type
	ContentType string `json:"contentType,omitempty"`

	// content Url
	// Format: uri
	ContentURL strfmt.URI `json:"contentUrl,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// dimensions
	Dimensions *ModelMediaMetadataDimensions `json:"dimensions,omitempty"`

	// id
	ID uuid.UUID `json:"id,omitempty"`

	// tags
	Tags []string `json:"tags"`
}

// Validate validates this model media meta data
func (m *ModelMediaMetaData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContentURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDimensions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelMediaMetaData) validateContentURL(formats strfmt.Registry) error {

	if swag.IsZero(m.ContentURL) { // not required
		return nil
	}

	if err := validate.FormatOf("contentUrl", "body", "uri", m.ContentURL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ModelMediaMetaData) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ModelMediaMetaData) validateDimensions(formats strfmt.Registry) error {

	if swag.IsZero(m.Dimensions) { // not required
		return nil
	}

	if m.Dimensions != nil {
		if err := m.Dimensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dimensions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelMediaMetaData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelMediaMetaData) UnmarshalBinary(b []byte) error {
	var res ModelMediaMetaData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
