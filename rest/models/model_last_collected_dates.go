// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelLastCollectedDates model last collected dates
//
// swagger:model model.LastCollectedDates
type ModelLastCollectedDates struct {

	// data point
	// Format: date-time
	DataPoint strfmt.DateTime `json:"dataPoint,omitempty"`

	// note
	// Format: date-time
	Note strfmt.DateTime `json:"note,omitempty"`

	// question answers
	// Format: date-time
	QuestionAnswers strfmt.DateTime `json:"questionAnswers,omitempty"`

	// spectrum
	// Format: date-time
	Spectrum strfmt.DateTime `json:"spectrum,omitempty"`

	// time series
	// Format: date-time
	TimeSeries strfmt.DateTime `json:"timeSeries,omitempty"`
}

// Validate validates this model last collected dates
func (m *ModelLastCollectedDates) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataPoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNote(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuestionAnswers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpectrum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeSeries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelLastCollectedDates) validateDataPoint(formats strfmt.Registry) error {

	if swag.IsZero(m.DataPoint) { // not required
		return nil
	}

	if err := validate.FormatOf("dataPoint", "body", "date-time", m.DataPoint.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ModelLastCollectedDates) validateNote(formats strfmt.Registry) error {

	if swag.IsZero(m.Note) { // not required
		return nil
	}

	if err := validate.FormatOf("note", "body", "date-time", m.Note.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ModelLastCollectedDates) validateQuestionAnswers(formats strfmt.Registry) error {

	if swag.IsZero(m.QuestionAnswers) { // not required
		return nil
	}

	if err := validate.FormatOf("questionAnswers", "body", "date-time", m.QuestionAnswers.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ModelLastCollectedDates) validateSpectrum(formats strfmt.Registry) error {

	if swag.IsZero(m.Spectrum) { // not required
		return nil
	}

	if err := validate.FormatOf("spectrum", "body", "date-time", m.Spectrum.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ModelLastCollectedDates) validateTimeSeries(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeSeries) { // not required
		return nil
	}

	if err := validate.FormatOf("timeSeries", "body", "date-time", m.TimeSeries.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelLastCollectedDates) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelLastCollectedDates) UnmarshalBinary(b []byte) error {
	var res ModelLastCollectedDates
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
